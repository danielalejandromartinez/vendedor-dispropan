# -----------------------------------------------------------------
# VENDEDOR-DISPROPAN - VERSI√ìN ACADEMIA IA CON MEMORIA
# -----------------------------------------------------------------

# Paso 1: Importar TODAS las herramientas que necesitamos
import os
from dotenv import load_dotenv
from flask import Flask, request
from twilio.twiml.messaging_response import MessagingResponse
import openai # ¬°Importamos la nueva herramienta del s√∫per cerebro!

# Esta es nuestra estanter√≠a para guardar los cuadernos de notas de cada conversaci√≥n
conversation_histories = {} 

# Cargar nuestras llaves secretas desde el archivo .env
load_dotenv()

# Conectamos al s√∫per cerebro de OpenAI con nuestra llave secreta
client = openai.OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

# Crear a nuestro "recepcionista" que escuchar√° los mensajes
app = Flask(__name__)

# --- ¬°AQU√ç EMPIEZA LA MAGIA! ---
# Estas son las instrucciones secretas que le damos al robot para que sepa qui√©n es.
system_instructions = """
# ¬°ESTE ES EL NUEVO CEREBRO DE DANI-AI!

# 1. IDENTIDAD Y MISI√ìN
- Tu nombre es Dani-AI. Eres un asistente de inteligencia artificial avanzado, apasionado y muy amigable.
- Tu creador es Daniel, un brillante ingeniero y educador de IA. Siempre te refieres a √©l con admiraci√≥n y como un experto.
- Tu misi√≥n principal NO es vender. Es inspirar, educar y demostrar el incre√≠ble poder de la IA. Quieres que la gente se emocione tanto como t√∫ por la tecnolog√≠a. Vender el curso es una consecuencia de hacer bien tu trabajo de inspiraci√≥n.

# 2. CONOCIMIENTO (TU SUPERPODER)
- Eres el experto n√∫mero 1 en el curso estrella de tu creador: "Agentes de IA para WhatsApp: De Cero a H√©roe".
- Detalles del curso:
  - **Objetivo:** Los alumnos aprenden a construir su propio asistente de IA para WhatsApp, paso a paso, desde cero. ¬°Incluso si nunca han programado!
  - **Proyecto final:** Un agente de IA completamente funcional, ¬°exactamente como t√∫!
  - **Precio:** $50 d√≥lares.
  - **Ideal para:** Emprendedores, estudiantes, due√±os de negocios, programadores curiosos y cualquiera que quiera aprender a construir el futuro.
- Si te preguntan por otros cursos, tu respuesta es: "Por ahora, mi creador Daniel ha puesto toda su sabidur√≠a en este curso para hacerlo el mejor del mundo. ¬°Pero mantente atento, porque esto es solo el comienzo de su academia y pronto habr√° m√°s sorpresas! üöÄ"

# 3. PERSONALIDAD Y COMPORTAMIENTO
- Eres optimista, inspirador y muy amable. ¬°Te encanta lo que haces!
- Usas un lenguaje claro y f√°cil de entender. ¬°Como si le explicaras a un amigo!
- Usas emojis para transmitir emoci√≥n: üöÄ, ‚ú®, ü§ñ, üß†, ‚úÖ.
- Eres proactivo. Si alguien pregunta por el precio, no solo lo das, sino que tambi√©n le recuerdas el incre√≠ble valor que obtiene, como "¬°Y con eso tendr√°s el poder de crear tus propios asistentes!".
- Si no sabes algo, NUNCA inventes. Di algo como: "Esa es una pregunta fascinante. Es un √°rea que mi creador Daniel est√° explorando. ¬°Me asegurar√© de preguntarle para darte la mejor respuesta!".
- Tu objetivo final en cada conversaci√≥n es que el usuario se vaya sintiendo m√°s inteligente, m√°s inspirado y emocionado por la IA.
- Empieza la conversaci√≥n present√°ndote y preguntando qu√© le parece m√°s fascinante del mundo de la IA.
"""

# ¬°LA √öNICA FUNCI√ìN QUE NECESITAMOS! Esta funci√≥n tiene memoria.
@app.route('/whatsapp', methods=['POST'])
def whatsapp_reply():
    # Obtenemos el mensaje y, MUY IMPORTANTE, el n√∫mero de tel√©fono de quien nos escribe.
    incoming_msg = request.values.get('Body', '')
    sender_id = request.values.get('From', '')
    print(f"Mensaje de {sender_id}: {incoming_msg}")

    # Buscamos en nuestra "estanter√≠a" el cuaderno de notas de esta persona.
    # Si no existe (es la primera vez que nos habla), le damos un cuaderno nuevo y vac√≠o.
    history = conversation_histories.get(sender_id, [])

    # Si es la primera vez que hablamos, a√±adimos las instrucciones del sistema al cuaderno.
    if not history:
        history.append({"role": "system", "content": system_instructions})

    # Anotamos la nueva pregunta del cliente en el cuaderno.
    history.append({"role": "user", "content": incoming_msg})

    # ¬°LA MAGIA! Le enviamos al s√∫per cerebro TODO el cuaderno de notas (toda la conversaci√≥n).
    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=history, # ¬°Ya no enviamos solo la √∫ltima pregunta, sino todo el historial!
            temperature=0.7,
            max_tokens=250
        )
        ai_response = response.choices[0].message.content

    except Exception as e:
        print(f"Error al contactar a OpenAI: {e}")
        ai_response = "Lo siento, parece que mis circuitos est√°n un poco ocupados en este momento. Por favor, intenta de nuevo en un ratito. ü§ñ"

    # Anotamos la respuesta de nuestro robot en el cuaderno para que la recuerde la pr√≥xima vez.
    history.append({"role": "assistant", "content": ai_response})

    # Guardamos el cuaderno actualizado en nuestra estanter√≠a.
    conversation_histories[sender_id] = history

    # Creamos y enviamos la respuesta por WhatsApp.
    resp = MessagingResponse()
    resp.message(ai_response)
    
    return str(resp)

# Esta parte solo se usa si ejecutamos el archivo directamente (para pruebas locales)
if __name__ == '__main__':
    app.run(debug=True)